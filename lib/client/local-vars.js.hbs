function resolveUrl(url) {
    // Relative URLs should honor the path prefix
  if (!/(^\/)|\/\//.test(url)) {
    url = {{requireFn}}.p + url;
  }
  return url;
}

function loadScript(src, componentName) {
  // Load the actual script
  var head = document.getElementsByTagName('head')[0];
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.charset = 'utf-8';
  script.src = resolveUrl(src);
  if (componentName) {
    script.setAttribute('data-circus-entry', componentName);
  }
  head.appendChild(script);
}

{{#if installedChunks}}
  // object to store loaded and loading chunks
  // "0" means "already loaded"
  // Array means "loading", array contains callbacks
  var installedChunks = {
    {{installedChunks}}
  };
{{/if}}

{{#if includeJsLoader}}
  var jsPaths = {{jsChunkNames}},
      moduleChunks = {{moduleChunks}};
{{/if}}

{{#if cssChunkNames}}
  // The css file cache
  var cssSheets = {},
      cssPaths = {{cssChunkNames}};
{{/if}}

// Maps friendly module names to internal names for exports
var moduleExports = {{moduleExports}};

{{#if exportAMD}}
if (window.define) {
  for (var name in moduleExports) {
    (function(name) {
      define(name, {{#if includeJsLoader}}['chunk_' + {{exports}} + moduleChunks[moduleExports[name]]],{{/if}} function() {
        return {{requireFn}}(name);
      });
    })(name);
  }
}
{{/if}}
