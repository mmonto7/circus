var __webpack_components__ = this.__webpack_components__ = {},
    installedComponents = __webpack_components__.c = {},
    installedChunks = {},
    installedModules = {},
    cssSheets = {},

    jsPaths = {{jsChunkNames}},
    cssPaths = {{cssChunkNames}};

// Exposing for testing/debugging purposes.
__webpack_components__.ex = moduleExports;

var isArray = Array.isArray || function(arg) {
  return Object.prototype.toString.call(arg) === '[object Array]';
};

function resolveUrl(url) {
    // Relative URLs should honor the path prefix
  if (!/(^\/)|\/\//.test(url)) {
    url = (__webpack_components__.p || '') + url;
  }
  return url;
}

// loadScript
function loadScript(src, fileId, componentName) {
  fileId = componentName + '_' + fileId;
  {{#if fruitLoops}}
    FruitLoops.loadInContext(src);
    $('body').append('<script type="text/javascript" type="utf-8" src="' + resolveUrl(src) + '"'
          + ' data-circus-jsid="' + fileId + '">');
  {{else}}
    // Load the actual script
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = resolveUrl(src);
    script.setAttribute('data-circus-jsid', fileId);
    head.appendChild(script);
  {{/if}}
}


// Retrieves a currently loaded external module.
__webpack_components__.l/*ink*/ = function(componentName, module) {
  var component = installedComponents[componentName];

  if (!component || !component.call) {
    throw new Error('Component "' + componentName + '" required but not loaded');
  }

  return component(module);
};

// ensureComponent
function ensureComponent(id, linkedModules, componentNames, callback) {
  // Allow array inputs.
  if (id.length === 0) {
    setTimeout(callback, 0);
  } else if (isArray(id)) {
    var run = 0;
    for (var i = 0, len = id.length; i < len; i++) {
      ensureComponent(id[i], linkedModules, componentNames, function() {
        if (++run === len) {
          callback();
        }
      });
    }
    return;
  }

  var module = linkedModules[id],
      componentId = module.c/*omponent*/,
      componentName = componentNames[componentId];

  loadComponent(componentName, function() {
    var component = installedComponents[componentName];

    // Once the component is loaded, then ensure that the necessary chunks are
    // loaded as well.
    if (component && component.e) {
      component.e/*nsure*/(module.n/*ame*/, callback);
    } else {
      // Or we have a component that consists of only one chunk
      callback();
    }
  });
}
__webpack_components__.ec = ensureComponent;

__webpack_components__.e/*nsure*/ = function(requireFn, componentName, chunkId, callback) {
  var installed = installedChunks[componentName],
      exports = moduleExports[componentName],
      chunks = moduleChunks[componentName];

  if (exports[chunkId] != null) {
    chunkId = chunks[exports[chunkId]];
  }

  if (installed[chunkId] === 0) {
    return callback.call(null, requireFn);
  }

  // an array means "currently loading".
  if(installed[chunkId] !== undefined) {
    installed[chunkId].push(callback);
  } else {
    // start chunk loading
    installed[chunkId] = [callback];
    loadScript(jsPaths[componentName][chunkId], chunkId, componentName);
  }
};

__webpack_components__.r/*equire*/ = function(requireFn, componentName, moduleId) {
  var exports = moduleExports[componentName];
  if (exports[moduleId] != null) {
    moduleId = exports[moduleId];
  }
  var uniqueId = componentName + '_' + moduleId;

  // Check if module is in cache
  if (installedModules[uniqueId]) {
    return installedModules[uniqueId].exports;
  }

  // Create a new module (and put it into the cache)
  var module = installedModules[uniqueId] = {
    exports: {},
    id: moduleId,
    loaded: false
  };

  // Execute the module function
  requireFn.m[moduleId].call(module.exports, module, module.exports, requireFn);

  // Flag the module as loaded
  module.loaded = true;

  // Return the exports of the module
  return module.exports;
};


// Component loading: Loads the entry point for a particular component, which can
// then load any necessary chunks and other required components.

function loadComponent(componentName, callback) {
  var callbacks = installedComponents[componentName];
  if (isArray(callbacks)) {
    callbacks.push(callback);
  } else if (callbacks) {
    callback();
  } else {
    installedComponents[componentName] = [callback];
    loadScript(componentPaths[componentName], 0, componentName);
  }
}
__webpack_components__.lc = loadComponent;

// componentComplete
__webpack_components__.cc = function(componentName, initialChunks, requireFn) {
  var callbacks = installedComponents[componentName];
  installedComponents[componentName] = requireFn;
  installedChunks[componentName] = initialChunks;
  requireFn.ex = moduleExports[componentName];
  requireFn.mc = moduleChunks[componentName];

  requireFn(0);

  while (callbacks && callbacks.length) {
    callbacks.shift()();
  }

  {{#if exportAMD}}
  // Notify all of the pending AMD modules that this dependency is cleared
  if (window.define) {
    var nameBase = 'chunk_' + componentName;
    define(nameBase + 0, function() {});
    require([nameBase + 0]);
  }
  {{/if}}
};

{{#if exportAMD}}
// Notify all of the pending AMD modules that this dependency is cleared
if (window.define) {
  for (var componentName in moduleExports) {
    var exports = moduleExports[componentName],
        chunks = moduleChunks[componentName];

    for (var name in exports) {
      (function(componentName, name) {
        define(name, ['chunk_' + componentName + chunks[exports[name]]], function() {
          return installedComponents[componentName](name);
        });
      })(componentName, name);
    }
  }
}
{{/if}}

// cssLoader
__webpack_components__.cs = function(componentName, chunkId) {
  var fileId = componentName + '_' + chunkId,
      path = cssPaths[componentName][chunkId];

  if (cssSheets[fileId] || !path) {
    return cssSheets[fileId];
  }

  {{#if fruitLoops}}
    cssSheets[fileId] = $('head').append('<link rel="stylesheet" href="' + resolveUrl(path) + '" data-circus-cssid="' + fileId + '">');
  {{else}}
    cssSheets[fileId] = document.querySelector('[data-circus-cssid=' + fileId + ']');

    if (!cssSheets[fileId]) {
      var styleElement = cssSheets[fileId] = document.createElement('link');
      styleElement.rel = 'stylesheet';
      styleElement.type = 'text/css';
      styleElement.href = resolveUrl(path);
      styleElement.setAttribute('data-circus-cssid', fileId);

      var head = document.getElementsByTagName('head')[0];
      head.appendChild(styleElement);
    }

    return cssSheets[fileId];
  {{/if}}
};
